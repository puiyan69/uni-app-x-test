{"version":3,"sources":["uni_modules/uni-stat/utssdk/common/core/report.uts","uni_modules/uni-stat/utssdk/common/config.uts","uni_modules/uni-stat/utssdk/common/core/stat.uts","uni_modules/uni-stat/utssdk/common/utils/db.uts","uni_modules/uni-stat/utssdk/interface.uts","uni_modules/uni-stat/utssdk/common/utils/pageTime.uts","uni_modules/uni-stat/utssdk/common/core/stat-type.uts","uni_modules/uni-stat/utssdk/common/utils/index.uts","uni_modules/uni-stat/utssdk/common/utils/pageInfo.uts","uni_modules/uni-stat/utssdk/index.uts"],"sourcesContent":["import { OnLaunchOptionsWithCst, StatDefault, PageParams, TitleConfigParams, RequestData, EventParams } from '../../interface.uts'\nimport { get_residence_time, get_time, set_first_time, get_last_visit_time, get_first_visit_time, get_total_visit_count, get_page_residence_time, set_page_residence_time } from '../utils/pageTime.uts'\nimport { get_default_data, get_route, get_page_name, get_odid, is_handle_device, get_scene, get_report_Interval } from '../utils/pageInfo.uts'\nimport { ReportType, ReprotCstType } from './stat-type.uts'\nimport { dbGet, dbSet, dbRemove } from '../utils/db.uts'\nimport { Log, Map2String, Map2Json, handle_data } from '../utils/index.uts'\nimport { OPERATING_TIME, STAT_VERSION, Config } from '../config.uts'\n// import Config from '../config'\n\n\n\nclass CloudObjectToDo extends InternalUniCloudCloudObjectCaller {\n  constructor(obj : InternalUniCloudCloudObject) {\n    super(obj)\n  }\n  report(...do_not_transform_spread : Array<any | null>) : Promise<UTSJSONObject> {\n    return this._obj.callMethod('report', this._getArgs(...do_not_transform_spread))\n  }\n}\n\n\n\n\nexport class Report {\n  /* uniCloud 实例 */\n  // @ts-ignore\n  static uniCloudInstance : UniCloud | null = null\n  /**进入应用标识*/\n  licationShow : boolean = false\n  /**离开应用标识*/\n  licationHide : boolean = false\n  /** 上报数据 */\n  statData : StatDefault\n  // 上报间隔时长,默认值 是10\n  eportInterval = get_report_Interval(OPERATING_TIME)\n\n  _navigationBarTitle : TitleConfigParams = {\n    config: '',\n    page: '',\n    report: '',\n    lt: ''\n  } as TitleConfigParams\n\n  constructor() {\n    this.statData = get_default_data()\n\n    // 注册拦截器\n    // @ts-ignore\n    let registerInterceptor = typeof uni.addInterceptor === 'function'\n    if (registerInterceptor) {\n      this.interceptSetNavBar()\n      this.interceptLogin()\n      this.interceptShare(true)\n      this.interceptRequestPayment()\n    }\n  }\n\n  /**\n   * 拦截 setNavigationBarTitle 事件\n   */\n  interceptSetNavBar() {\n    let self = this\n    // @ts-ignore\n    uni.addInterceptor('setNavigationBarTitle', {\n      // @ts-ignore\n      invoke(args : SetNavigationBarTitleOptions) {\n        self._navigationBarTitle.page = args.title\n      },\n      // @ts-ignore\n    } as Interceptor)\n  }\n\n  /**\n   * 拦截 login 事件\n   */\n  interceptLogin() {\n    let self = this\n    // @ts-ignore\n    uni.addInterceptor('login', {\n      complete() {\n        self._login()\n      },\n      // @ts-ignore\n    } as Interceptor)\n  }\n  interceptShare(type : boolean = false) {\n    let self = this\n    if (!type) {\n      self._share()\n      return\n    }\n    // @ts-ignore\n    uni.addInterceptor('share', {\n      complete() {\n        self._share()\n      }\n      // @ts-ignore\n    } as Interceptor)\n  }\n  interceptRequestPayment() {\n    let self = this\n    // @ts-ignore\n    uni.addInterceptor('requestPayment', {\n      success() {\n        self._payment('pay_success')\n      },\n      fail() {\n        self._payment('pay_fail')\n      },\n      // @ts-ignore\n    } as Interceptor)\n  }\n\n  /**\n   * 实现登录拦截逻辑\n   */\n  private _login() {\n    this.sendEventRequest(\n      {\n        key: 'login',\n      } as EventParams\n    )\n  }\n\n  private _share() {\n    this.sendEventRequest(\n      {\n        key: 'share',\n      } as EventParams\n    )\n  }\n\n  private _payment(key : string) {\n    this.sendEventRequest(\n      {\n        key,\n      } as EventParams\n    )\n  }\n\n  /**\n   * 进入应用\n   * @param {any} options 应用参数\n   */\n  launch(options : any) {\n    // 重置页面停留时长\n    set_page_residence_time()\n    // 告诉report是应用进来的\n    this.licationShow = true\n    // 存储应用传入值\n    dbSet('__launch_options', options)\n    // 应用初始上报参数为1\n    // TODO 这里应该是 把 options 都结构到下面对象中，目前unix只有path ，所以这段代码后续需要改一下\n    // let request_option : OnLaunchOptionsWithCst = {\n    // \t...options,\n    // \tcst: ReprotCstType.AppNormal\n    // }\n    let request_option : OnLaunchOptionsWithCst = {\n      // @ts-ignore\n      path: (options as OnLaunchOptions).path,\n      cst: ReprotCstType.AppNormal\n    }\n\n    // 上报数据\n    this.sendAppRequest(request_option, true)\n  }\n  /**\n   * 进入应用\n   * @description 上报主要数据采集是从onShow\n   */\n  load() {\n    // 记录当前页面实例\n    // this.appInstance = appInstance\n  }\n\n  /**\n   * 进入应用或应用从后台进入前台\n   */\n  appShow() {\n    // 通过 licationHide 判断,保证是进入后台后在次进入应用，避免重复上报数据\n    // 当前方法在应用声明周期内，只会触发一次，即首次进入应用触发\n\n    if (!this.licationHide) return\n    const time = get_residence_time('app')\n    // 需要判断进入后台是否超过时限 ，默认是 5min ，是的话需要执行进入应用的上报\n    if (time.overtime) {\n      let lastPageRoute = uni.getStorageSync('_STAT_LAST_PAGE_ROUTE') as string\n      let options : OnLaunchOptionsWithCst = {\n        path: lastPageRoute,\n        scene: this.statData.sc,\n        cst: ReprotCstType.AppAwakenTimeout,\n      }\n      this.sendAppRequest(options)\n    }\n    // 状态重置\n    this.licationHide = false\n  }\n\n  /**\n   * 引用进入后台触发\n   * @param {Boolean} type 是否立即触发上报\n   */\n  appHide(type : boolean = false) {\n    // 进入应用后台保存状态，方便进入前台后判断是否上报应用数据\n    this.licationHide = true\n    const time = get_residence_time('outher')\n\n    const route = get_route().fullpath\n    uni.setStorageSync('_STAT_LAST_PAGE_ROUTE', route)\n\n    const formdata : PageParams = {\n      url: route,\n      urlref: route,\n      urlref_ts: time.residenceTime,\n      // urlref_tt: ''\n    }\n\n\n    this.sendHideRequest(formdata, type)\n    // 更新页面首次访问时间\n    set_first_time()\n  }\n\n  /**\n   * 进入页面触发\n   * @param {Page } self 当前页面实例\n   */\n  // @ts-ignore\n  pageShow(self : Page) {\n    // 初始化，标题数据。清空值，避免污染后面的上报数据\n    this._navigationBarTitle = { config: '', page: '', report: '', lt: '' } as TitleConfigParams\n\n    // 获取页面路径\n    const { path, fullpath } = get_route(self)\n\n    // 获取页面标题\n    const pageTitle = get_page_name(path)\n    this._navigationBarTitle.config = pageTitle\n\n\n    // 表示应用触发 ，页面切换不触发之后的逻辑\n    if (this.licationShow) {\n      // 更新页面首次访问时间\n      set_first_time()\n      uni.setStorageSync('_STAT_LAST_PAGE_ROUTE', fullpath)\n      this.licationShow = false\n      return\n    }\n    // 页面进入\n    const time = get_residence_time('page')\n    // 停留时间,判断是否长时间停留在当前页面，如果超过30min重新上报数据\n    if (time.overtime) {\n      let options : OnLaunchOptionsWithCst = {\n        path: fullpath,\n        scene: this.statData.sc,\n        cst: ReprotCstType.PageStayTimeout,\n      }\n      this.sendAppRequest(options)\n    }\n    // 更新页面首次访问时间\n    set_first_time()\n  }\n\n  /**\n   * 离开页面触发\n   * @param {ComponentPublicInstance } self 当前页面实例\n   */\n  // @ts-ignore\n  pageHide(self : Page) {\n    // 如果进入后台则不触发后续 页面隐藏的逻辑\n    if (this.licationHide) return\n    const time = get_residence_time('page')\n\n    let fullpath = get_route(self).fullpath\n    let lastPageRoute = uni.getStorageSync('_STAT_LAST_PAGE_ROUTE')\n\n    // 如果不存在的话，复制当前的路径，说明之前没有页面\n    if (lastPageRoute == null) {\n      lastPageRoute = fullpath\n    }\n    uni.setStorageSync('_STAT_LAST_PAGE_ROUTE', fullpath)\n\n    const options : PageParams = {\n      url: fullpath,\n      urlref: lastPageRoute as string,\n      urlref_ts: time.residenceTime,\n      urlref_tt: ''\n    }\n\n    this.sendPageRequest(options)\n  }\n\n  appError(em : any) {\n    console.log('发生了错误123');\n    console.log(em);\n    let errmsg : string\n\n    // @ts-ignore\n    if (em instanceof Exception) {\n      errmsg = em.message ?? ''\n    } else if (em instanceof Error) {\n      errmsg = em.message\n    } else {\n      errmsg = JSON.stringify(em)\n    }\n\n\n\n\n\n\n    let route = get_route().path\n\n    let options : StatDefault = {\n      ak: this.statData.ak,\n      uuid: this.statData.uuid,\n      p: this.statData.p,\n      lt: '31',\n      url: route,\n      ut: this.statData.ut,\n      ch: this.statData.ch,\n      mpsdk: this.statData.mpsdk,\n      mpv: this.statData.mpv,\n      v: this.statData.v,\n      em: errmsg,\n      usv: this.statData.usv,\n      t: get_time(),\n    }\n\n    this.request(options, false)\n  }\n\n  /**\n   * 发送请求,应用维度上报\n   * @param {Object} options 页面信息\n   * @param {Boolean} type 是否立即上报\n   */\n  sendAppRequest(options : OnLaunchOptionsWithCst, type : boolean = false) {\n\n    let is_opt = options.query != null && JSON.stringify(options.query) != '{}'\n    // TODO ，此处处理的值有问题，\n    // 如果页面有参数 需要上传如：/xxx/xxx?{xx:xx,xxx:xxx} 格式的值\n    let query = is_opt ? '?' + JSON.stringify(options.query) : ''\n    // 获取应用最后访问时间\n    const last_time = get_last_visit_time()\n    // 非老用户\n    if (last_time != 0) {\n      const odid = get_odid()\n      // TODO 老版本的odid兼容问题，看看是否需要保留\n      const have_device = is_handle_device()\n      // 如果没有上报过设备信息 ，则需要上报设备信息\n      if (!have_device) {\n        this.statData.odid = odid\n      }\n\n    }\n\n    this.statData.lt = ReportType.AppStart\n    this.statData.url = options.path + query\n    this.statData.t = get_time()\n    this.statData.sc = get_scene(options)\n    this.statData.fvts = get_first_visit_time()\n    this.statData.lvts = last_time\n    this.statData.tvc = get_total_visit_count()\n    this.statData.cst = options.cst ?? ReprotCstType.AppNormal\n\n    // TODO 获取应用版本，网络信息和地址信息\n    // if (get_platform_name() === 'n') {\n    // \tthis.getProperty(type)\n    // } else {\n    // \tthis.getNetworkInfo(type)\n    // }\n\n\n    this.request(this.statData, type)\n  }\n\n  /**\n   * 发送请求,页面维度上报\n   * @param {Object} opt\n   */\n  sendPageRequest(opt : PageParams) {\n    let { url, urlref, urlref_ts } = opt\n    this._navigationBarTitle.lt = ReportType.PageShow\n    let options : StatDefault = {\n      ak: this.statData.ak,\n      uuid: this.statData.uuid,\n      p: this.statData.p,\n      lt: ReportType.PageShow,\n      ut: this.statData.ut,\n      url,\n      // TODO 好像是没有这个参数,看一下具体描述\n      tt: this.statData.tt,\n      urlref,\n      urlref_ts,\n      ch: this.statData.ch,\n      usv: this.statData.usv,\n      t: get_time(),\n    }\n    this.request(options)\n  }\n\n  /**\n   * 进入后台上报数据\n   * @param {Object} opt 页面进入应用参数\n   * @param {Boolean} type 是否立即上报数据\n   */\n  sendHideRequest(opt : PageParams, type : boolean) {\n    let { urlref, urlref_ts } = opt\n    let options : StatDefault = {\n      ak: this.statData.ak,\n      uuid: this.statData.uuid,\n      p: this.statData.p,\n      lt: ReportType.AppHide,\n      ut: this.statData.ut,\n      urlref: urlref,\n      urlref_ts: urlref_ts,\n      ch: this.statData.ch,\n      usv: this.statData.usv,\n      t: get_time(),\n    }\n    this.request(options, type)\n  }\n\n  /**\n   * 推送数据上报\n   * @param {any} options\n   * @param {string} cid\n   */\n  sendPushRequest(options : any, cid : string) {\n    let time = get_time()\n\n    const statData : StatDefault = {\n      uuid: this.statData.uuid,\n      p: this.statData.p,\n      ak: this.statData.ak,\n      lt: ReportType.Push,\n      cid: cid,\n      t: time,\n      ut: this.statData.ut,\n    }\n\n    const dataStr = JSON.stringify(statData)\n\n\n\n\n\n\n\n\n    // @ts-ignore\n    let uniStatData = JSON.parse<Map<string, StatDefault[]>>(dataStr)\n\n    if (uniStatData == null) {\n      uniStatData = new Map([])\n    }\n\n\n\n    const hasKey = uniStatData.has(ReportType.Push)\n    if (!hasKey) {\n      uniStatData.set(ReportType.Push, [])\n    }\n\n    // 将消息加入对列\n    uniStatData.get(ReportType.Push)!.push(statData)\n\n    const stat_data = handle_data(uniStatData)\n    let optionsData : RequestData = {\n      usv: STAT_VERSION, //统计 SDK 版本号\n      t: time, //发送请求时的时间戮\n      requests: stat_data,\n    }\n\n    this.sendRequest(optionsData)\n  }\n\n\n  /**\n   * 自定义事件上报\n   * @param {EventParams} data 事件参数\n   */\n  sendEventRequest(data : EventParams) {\n    const key = data.key\n    const value = data.value ?? ''\n\n    let routepath = get_route().fullpath\n    const lt = ReportType.Event\n    this._navigationBarTitle.config = get_page_name(routepath)\n    this._navigationBarTitle.lt = lt\n    let options : StatDefault = {\n      ak: this.statData.ak,\n      uuid: this.statData.uuid,\n      p: this.statData.p,\n      lt: lt,\n      ut: this.statData.ut,\n      url: routepath,\n      ch: this.statData.ch,\n      e_n: key,\n      e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n      usv: this.statData.usv,\n      t: get_time(),\n    }\n    this.request(options)\n  }\n\n  /**\n   * 发送请求\n   * @param {StatDefault} data 上报数据\n   * @param {Object} type 类型\n   */\n  request(data : StatDefault, type : boolean = false) {\n    const statConfig = Config.getOptions()\n    let time = get_time()\n\n    // 需要把标题插入到数据中\n    const title = this._navigationBarTitle\n    data.ttn = title.page\n    data.ttpj = title.config\n    data.ttc = title.report\n\n    if (statConfig.debug!) {\n      // 打印输出日志\n      Log(data)\n    }\n\n    const lt = data.lt!\n\n    // 获取消息对列\n    let statData = dbGet<string>('__UNI__STAT__DATA')\n\n    if (statData == null) {\n      statData = '{}'\n    }\n\n\n    let uniStatData = JSON.parse<Map<string, StatDefault[]>>(statData)\n\n    if (uniStatData == null) {\n      uniStatData = new Map([])\n    }\n\n    const hasKey = uniStatData.has(lt)\n    if (!hasKey) {\n      uniStatData.set(lt, [])\n    }\n\n    // 将消息加入对列\n    uniStatData.get(lt)!.push(data)\n\n    // 将 map 转换为 str\n    const statDataStr = Map2String(uniStatData)\n    // 存储\n    dbSet('__UNI__STAT__DATA', statDataStr)\n\n    let page_residence_time = get_page_residence_time()\n\n    // 判断时候到达上报时间 ，默认 10 秒上报\n    const is_timeout = page_residence_time < this.eportInterval && !type\n\n    if (is_timeout) return\n\n    // 时间超过，重新获取时间戳\n    set_page_residence_time()\n\n    if (statConfig.debug!) {\n      // 待上传消息对列\n      console.log(`=== 统计待上传队列数据 ===`)\n      const statJSON = Map2Json(uniStatData)\n      console.log(statJSON)\n      console.log(`=== 采集结束 ===`)\n    }\n\n\n\n    const stat_data = handle_data(uniStatData)\n\n    let optionsData : RequestData = {\n      usv: STAT_VERSION, //统计 SDK 版本号\n      t: time, //发送请求时的时间戮\n      requests: stat_data,\n    }\n\n    // 重置队列\n    dbRemove('__UNI__STAT__DATA')\n\n    this.sendRequest(optionsData)\n  }\n\n  sendRequest(options : RequestData) {\n    const statConfig = Config.getOptions()\n\n    if (Report.uniCloudInstance != null) {\n\n      // 数据上报\n      const app = Report.uniCloudInstance!\n\n\n      // @ts-ignore\n      const uniCloudObj = app.importObject('uni-stat-receiver', {\n        customUI: true,\n        // @ts-ignore\n      } as UniCloudImportObjectOptions, UTSAndroid.getJavaClass(CloudObjectToDo))\n\n\n\n\n\n\n\n\n\n\n\n\n      uniCloudObj\n        .report(options)\n        .then(() => {\n          if (statConfig.debug!) {\n            console.log(`=== 统计队列数据上报 ===`)\n            console.log(options)\n            console.log(`=== 上报结束 ===`)\n          }\n        })\n        .catch((err : any | null) => {\n          console.log('=== 统计上报错误 ===')\n          console.error(err)\n          console.log(`=== 上报结束 ===`)\n        })\n    }\n\n  }\n}\n","\nimport { UniStatOptions, UniStatCollectItemsOptions } from '../interface.uts'\n// 访问开始即启动小程序，访问结束结分为：进入后台超过5min、在前台无任何操作超过30min、在新的来源打开小程序；\nexport const sys = uni.getSystemInfoSync()\nexport const sysAppBase = uni.getAppBaseInfo();\nexport const STAT_VERSION = sys.uniCompilerVersion\n\nexport const PAGE_PVER_TIME = 1800 // 页面在前台无操作结束访问时间 单位s\nexport const APP_PVER_TIME = 300 // 应用在后台结束访问时间 单位s\nexport const OPERATING_TIME = 10 // 数据上报时间 单位s\nexport const DIFF_TIME = 60 * 1000 * 60 * 24\n\nclass ConfigData {\n\tstatic __config_instance : ConfigData | null = null;\n\n\tpublic static getInstance() : ConfigData {\n\t\tif (ConfigData.__config_instance == null) {\n\t\t\tConfigData.__config_instance = new ConfigData()\n\t\t}\n\n\t\treturn ConfigData.__config_instance as ConfigData\n\t}\n\tprivate options : UniStatOptions | null = null\n\tprivate constructor() {\n\t\t// 私有构造函数，防止通过 new Singleton() 创建新实例\n\t}\n\n\tsetOptions(options : UniStatOptions | null) {\n\t\t// 处理参数默认值\n\t\t// 判断是否存在 options \n\t\tif (options == null) {\n\t\t\toptions = {} as UniStatOptions\n\t\t}\n\t\t// 是否开启debug，默认false\n\t\tif (options.debug == null) {\n\t\t\toptions.debug = false\n\t\t}\n\t\t// 上报周期，默认 10s \n\t\tif (options.reportInterval == null) {\n\t\t\toptions.reportInterval = 10\n\t\t}\n\n\t\t// 采集项配置\n\t\tif (options.collectItems == null) {\n\t\t\toptions.collectItems = {} as UniStatCollectItemsOptions\n\t\t}\n\t\tlet collectItems = options.collectItems as UniStatCollectItemsOptions\n\t\t// 是否开启推送，默认为false\n\t\tif (collectItems.uniPushClientID === null) {\n\t\t\tcollectItems.uniPushClientID = false\n\t\t}\n\n\t\t// 是否开启页面采集，默认为 true\n\t\tif (collectItems.uniStatPageLog === null) {\n\t\t\tcollectItems.uniStatPageLog = true\n\t\t}\n\t\toptions.collectItems = collectItems\n\n\t\tthis.options = options\n\t}\n\tgetOptions() : UniStatOptions {\n\t\t// 如果没有参数，获取参数时设置为默认值\n\t\tif (this.options == null) {\n\t\t\tthis.setOptions(null)\n\t\t}\n\t\treturn this.options as UniStatOptions\n\t}\n}\n\nexport const Config =  ConfigData.getInstance()\n","\nimport { Report } from \"./report.uts\";\nimport { StatType } from \"./stat-type\";\nimport { EventParams, UniStatOptions, ErrorCallback } from '../../interface.uts'\nimport { is_page, is_page_report, get_space, is_push_clientid, calibration } from '../utils/pageInfo.uts'\nimport { Config } from \"../config\";\n\nexport class Stat {\n\tstatic __stat_instance : Stat | null = null;\n\tstatic is_register : boolean = false\n\t// 上报逻辑实例\n\treport : Report;\n\t// 使用单例，只初始化一次\n\tstatic getInstance() : Stat {\n\n\t\t// 获取服务空间配置信息\n\t\tlet space = get_space(uniCloud.config)\n\t\tif (Report.uniCloudInstance == null) {\n\t\t\t// 判断不为空对象\n\t\t\tif (space != null) {\n\t\t\t\t// 重新构造 uniCloud\n\t\t\t\tlet spaceData : UniCloudInitOptions = {\n\t\t\t\t\tprovider: space.provider,\n\t\t\t\t\tspaceId: space.spaceId,\n\t\t\t\t\tclientSecret: space.clientSecret,\n\t\t\t\t}\n\t\t\t\tconst endpoint = space.endpoint\n\t\t\t\tif (endpoint != null) {\n\t\t\t\t\tspaceData.endpoint = space.endpoint\n\t\t\t\t}\n\n\t\t\t\t// 支付宝单独处理一些参数\n\t\t\t\tif (space.provider == 'alipay') {\n\t\t\t\t\tspaceData.secretKey = space.secretKey\n\t\t\t\t\tspaceData.accessKey = space.accessKey\n\t\t\t\t\tspaceData.spaceAppId = space.spaceAppId\n\t\t\t\t}\n\n\t\t\t\t// 初始化 uniCloud\n\t\t\t\t// @ts-ignore\n\t\t\t\tReport.uniCloudInstance = uniCloud.init(spaceData)\n\n\t\t\t} else {\n\t\t\t\tconsole.error('应用已集成uni统计，但未关联服务空间，请在uniCloud目录右键关联服务空间')\n\t\t\t}\n\t\t}\n\n\t\t// 实例化统计sdk ，要在 实例 unicloud 之后进行，避免 Report 无法拿到 uniCloud 实例\n\t\tif (this.__stat_instance == null) {\n\t\t\tthis.__stat_instance = new Stat()\n\t\t}\n\n\t\treturn this.__stat_instance as Stat\n\t}\n\n\n\t// 当前生命周期内的页面或应用实例\n\tappInstance ?: Page | null = null\n\n\tprivate isHide : boolean = false\n\tconstructor() {\n\t\tthis.report = new Report()\n\t}\n\n\t/**\n\t * 初始化插件参数\n\t * @param {Object} options\n\t */\n\tinit(options : UTSJSONObject) {\n\t\t// 插件挂载玩成，可以进行后续操作\n\t\tStat.is_register = true\n\n\t\t// 参数处理\n\t\tConfig.setOptions({ ...options } as UniStatOptions)\n\t\tconst uniStatConfig = Config.getOptions()\n\t\t// 设置上报周期时间\n\t\tthis.report.eportInterval = uniStatConfig.reportInterval ?? 10\n\n\t}\n\t/**\n\t * 应用启动\n\t * @param {OnLaunchOptions} options 应用参数\n\t * @param {ComponentPublicInstance} appInstance 应用实例\n\t */\n\t// options : OnLaunchOptions, appInstance : ComponentPublicInstance\n\tonLaunch(options : OnLaunchOptions, appInstance : ComponentPublicInstance) {\n\t\t// 注册事件 onLaunch ,需要手动触发\n\t\t// this.registerEvent(StatType.LifeCycleLaunch, appInstance, options as any)\n\t}\n\t/**\n\t * 页面加载\n\t * @param {ComponentPublicInstance} appInstance 应用实例\n\t */\n\tonLoad(appInstance : Page) {\n\t\tthis.registerEvent(StatType.LifeCycleLoad, appInstance)\n\t}\n\t/**\n\t * 显示页面或应用进入前台\n\t * @param {ComponentPublicInstance} appInstance 应用实例\n\t */\n\tonShow(appInstance : Page) {\n\t\tthis.isHide = false\n    // @ts-ignore\n\t\tconst mptype = is_page(appInstance)\n\n\t\t// 页面执行，应用需要手动调用\n\t\tif (mptype) {\n\t\t\tthis.registerEvent(StatType.LifeCyclePageShow, appInstance, null)\n\t\t}\n\t\t// const life_type = mptype == 'app' ? StatType.LifeCycleAppShow : StatType.LifeCyclePageShow\n\t\t// this.registerEvent(life_type, appInstance, null)\n\t}\n\n\t/**\n\t * 页面隐藏或应用进入后台\n\t * @param {ComponentPublicInstance} appInstance 应用实例\n\t */\n\tonHide(appInstance : Page) {\n\n\t\tthis.isHide = true\n    // @ts-ignore\n\t\tconst mptype = is_page(appInstance)\n\n\t\t// 页面执行，应用需要手动调用\n\t\tif (mptype) {\n\t\t\tthis.registerEvent(StatType.LifeCyclePageHide, appInstance, null)\n\t\t}\n\t\t// const life_type = mptype == 'app' ? StatType.LifeCycleAppHide : StatType.LifeCyclePageHide\n\t\t// this.registerEvent(life_type, appInstance, null)\n\t}\n\n\t/**\n\t * 卸载页面\n\t * @param {ComponentPublicInstance} appInstance 应用实例\n\t */\n\tonUnload(appInstance : Page) {\n\t\t// 如果 isHide 为true 说明页面隐藏了，不走卸载逻辑，如果走卸载逻辑，isHide 必不可能是true\n\t\tif (this.isHide) {\n\t\t\tthis.isHide = false\n\t\t\treturn\n\t\t}\n\t\tthis.registerEvent(StatType.LifeCyclePageUnLoad, appInstance, null)\n\t}\n\n\t/**\n\t * 错误\n\t * @param {String} error 应用实例\n\t */\n\tonError(error : string) {\n\t\t// 单独处理错误上报\n\t\tthis.error(error)\n\t}\n\n\t/**\n\t * 获取推送ID\n\t */\n\tpushEvent(options : any) {\n\t\t// TODO 具体实现\n\t\tconst ClientID = is_push_clientid()\n\t\tif (ClientID) {\n\t\t\tuni.getPushClientId({\n\t\t\t\tsuccess: (res) => {\n\t\t\t\t\tconst cid = res.cid\n\t\t\t\t\t//  只有获取到才会上传\n\t\t\t\t\t// if (cid != null) {\n\t\t\t\t\tthis.report.sendPushRequest(options, cid)\n\t\t\t\t\t// }\n\t\t\t\t},\n\t\t\t} as GetPushClientIdOptions)\n\t\t}\n\t}\n\n\t/**\n\t * 注册事件\n\t * @param {number} EventType 事件类型\n\t * @param {Page} appInstance\t当前页面实例\n\t * @param {UTSJSONObject} options 应用参数\n\t */\n\tregisterEvent(EventType : number, appInstance : Page | null, options : any | null = null, error : any | null = '') {\n\t\tthis.appInstance = appInstance\n\t\t// 是否要上报页面数据\n\t\tconst isPageReport = is_page_report()\n\t\tswitch (EventType) {\n\t\t\tcase StatType.LifeCycleLaunch:\n\t\t\t\t// 使用非空断言，options在这里肯定非空\n\t\t\t\tthis.report.launch(options!)\n\t\t\t\tthis.pushEvent(options)\n\t\t\t\tbreak\n\t\t\tcase StatType.LifeCycleAppShow:\n\t\t\t\t// TODO 目前只兼容 web 和 app ，小程序等平台需要调用 api onAppHide\n\t\t\t\tthis.report.appShow()\n\t\t\t\tbreak\n\t\t\tcase StatType.LifeCycleAppHide:\n\t\t\t\tthis.report.appHide(true)\n\t\t\t\tbreak\n\t\t\tcase StatType.LifeCycleLoad:\n\t\t\t\tbreak\n\t\t\tcase StatType.LifeCyclePageShow:\n\t\t\t\tif (isPageReport) {\n\t\t\t\t\tthis.report.pageShow(appInstance!)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase StatType.LifeCyclePageHide:\n\t\t\t\tif (isPageReport) {\n\t\t\t\t\tthis.report.pageHide(appInstance!)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase StatType.LifeCyclePageUnLoad:\n\t\t\t\tif (isPageReport) {\n\t\t\t\t\tthis.report.pageHide(appInstance!)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase StatType.LifeCycleError:\n\t\t\t\tif (error != null) {\n\t\t\t\t\tthis.report.appError(error)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\terror(em : string) {\n\t\t// 生命周期监听，暂时无用，需要手动调用api\n\t}\n\t// 自定义参数上报\n\t// fn : ErrorCallback\n\tappEvent(name : string, options : any | null = null, fn : ErrorCallback) {\n\t\tif (!Stat.is_register) {\n\t\t\tfn(false, '统计服务尚未初始化，请在main.uts中引入统计插件。')\n\t\t\treturn\n\t\t}\n\t\t// const names = ['uni-app-launch', 'uni-app-show', 'uni-app-hide', 'uni-app-error']\n\t\t// if (names.indexOf(name) <= -1) {\n\t\t// \t// console.error('uniStatReport 事件名不存在，请检查！');\n\t\t// \tfn(false, 'uniStatReport 事件名不存在，请检查！')\n\t\t// \treturn\n\t\t// }\n\t\tif (name == 'uni-app-launch' && options == null) {\n\t\t\tfn(false, 'uniStatReport options参数错误，请检查！')\n\t\t\treturn\n\t\t}\n\t\tfn(true, 'report:ok')\n\t\tif (name == 'uni-app-launch') {\n\n\t\t\t// StatType.LifeCycleLaunch, null, options as OnLaunchOptions\n\t\t\tthis.registerEvent(StatType.LifeCycleLaunch, null, options)\n\t\t\treturn\n\t\t}\n\t\tif (name == 'uni-app-show') {\n\n\t\t\tthis.registerEvent(StatType.LifeCycleAppShow, null, null)\n\t\t\treturn\n\t\t}\n\t\tif (name == 'uni-app-hide') {\n\n\t\t\tthis.registerEvent(StatType.LifeCycleAppHide, null, null)\n\t\t\treturn\n\t\t}\n\t\tif (name == 'uni-app-error') {\n\n\t\t\tthis.registerEvent(StatType.LifeCycleError, null, null, options)\n\t\t\treturn\n\t\t}\n\n\t\t// 校验 type 参数\n\t\tconst is_calibration = calibration(name, options)\n\t\tif (is_calibration) {\n\t\t\treturn\n\t\t}\n\n\t\tif (name === 'title') {\n\t\t\tthis.report._navigationBarTitle.report = (options as string)\n\t\t\treturn\n\t\t}\n\n\t\tconst value = (typeof options === 'object' ? JSON.stringify(options) : options) as string\n\t\tconst data : EventParams = {\n\t\t\tkey: name,\n\t\t\tvalue: value as string,\n\t\t}\n\n\t\tthis.report.sendEventRequest(data)\n\t}\n}\n","const APPID = uni.getSystemInfoSync().appId \nexport function dbSet<T>(name : string, value : T) {\n\tlet data = uni.getStorageSync('$$STAT__DBDATA:' + APPID)\n\tlet newData = {} as UTSJSONObject\n\tif (data != null && typeof data == 'object') {\n\t\tnewData = data as UTSJSONObject\n\t}\n\t\n\tnewData[name] = value\n\tuni.setStorageSync('$$STAT__DBDATA:' + APPID, newData)\n}\n\nexport function dbGet<T>(name : string) : T | null {\n\tlet data = uni.getStorageSync('$$STAT__DBDATA:' + APPID)\n\tif (data == null) return null\n\tif (typeof data != 'object') return null\n\tconst newData = data as UTSJSONObject\n\treturn newData[name] as T\n}\n\nexport function dbRemove(name : string) {\n\tlet data = uni.getStorageSync('$$STAT__DBDATA:' + APPID)\n\tif(data == '') {\n\t\tdata = {}\n\t}\n\tif (data != null) {\n\t\tlet newData = data as UTSJSONObject\n\t\tif (newData[name] != null) {\n\t\t\tnewData[name] = null\n\t\t\tuni.setStorageSync('$$STAT__DBDATA:' + APPID, newData)\n\t\t}\n\t}\n}\n","export type ReportSuccess = {\n\terrMsg : string,\n}\n\nexport type ReportFail = {\n\t/**\n\t* 错误的详细信息\n\t*/\n\terrMsg : string,\n}\n\n\n\nexport type ReportOptions = {\n\t/**\n\t * 自定义事件名称\n\t * 内置名称(不允许覆盖)：\n\t * uni-app-launch ： 应用启动\n\t * uni-app-show\t\t： 应用进入前台\n\t * uni-app-hide\t\t： 应用进入后台\n\t * uni-app-error\t： 应用发生错误\n\t */\n\tname : string\n\t/**\n\t * 额外参数\n\t */\n\toptions ?: any\n\t/**\n\t\t* 接口调用结束的回调函数（调用成功、失败都会执行）\n\t\t*/\n\tsuccess ?: (res : ReportSuccess) => void\n\t/**\n\t\t* 接口调用失败的回调函数\n\t\t*/\n\tfail ?: (res : ReportFail) => void\n\t/**\n\t\t* 接口调用成功的回调\n\t\t*/\n\tcomplete ?: (res : any) => void\n}\n\nexport type ReportResult = {\n\n}\n\n/**\n* 自定义事件信息\n* @param {ReportOptions} options\n*\n*\n* @tutorial https://uniapp.dcloud.net.cn/xxxx\n* @platforms APP-IOS = ^9.0,APP-ANDROID = ^22\n* @since 4.25\n*/\n\nexport type Report = (options : ReportOptions) => void\n\ninterface Uni {\n\t/**\n\t * 统计自定义事件\n\t * @description 统计自定义事件上报\n\t * @param {ReportOptions} options\n\t * @example\n\t * ```typescript\n\t * uni.report({\n\t *\t\tname:'uni-app-launch',\n\t *\t\tsuccess(res) {\n\t *\t\t\tconsole.log(res);\n\t *\t\t}\n\t * })\n\t * ```\n\t * @remark\n\t * - 该接口需要同步调用\n\t * @uniPlatform {\n\t *    \"app\": {\n\t *        \"android\": {\n\t *            \"osVer\": \"4.4.4\",\n\t *            \"uniVer\": \"3.6.11\",\n\t *            \"unixVer\": \"3.9.0\"\n\t *        },\n\t *        \"ios\": {\n\t *            \"osVer\": \"9.0\",\n\t *            \"uniVer\": \"3.6.11\",\n\t *            \"unixVer\": \"3.9.0\"\n\t *        }\n\t *    }\n\t * }\n\t * @uniVueVersion 2,3  //支持的vue版本\n\t *\n\t */\n\treport(options : ReportOptions) : void,\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 统计插件参数类型\nexport type UniStatOptions = {\n\t/* 是否开启debug模式，默认 false */\n\tdebug ?: boolean\n\t/* 前端数据上报周期 ，默认 10s ，单位s */\n\treportInterval ?: number\n\t/* 多服务空间配置 */\n\tuniCloud ?: UniCloudInitOptions\n\t/* 采集项配置 */\n\tcollectItems ?: UniStatCollectItemsOptions\n}\n\nexport type UniStatCollectItemsOptions = {\n\t/* 是否开启推送PushClientID的采集，默认false */\n\tuniPushClientID ?: boolean\n\t/* 是否开启页面数据采集，默认true */\n\tuniStatPageLog ?: boolean\n}\n\n/**\n * 应用参数扩展\n */\nexport type OnLaunchOptionsWithCst = {\n\t/** 页面路径 */\n\tpath ?: string\n\t/** 上报时机，参看 ReprotCstType */\n\tcst ?: number\n\t/** 场景值 */\n\tscene ?: number\n\t/** 参数 */\n\tquery ?: string\n};\n\n/**\n * 停留时长\n */\nexport type ResidenceTimeReturn = {\n\t/** 停留时长 */\n\tresidenceTime : number\n\t/** 是否超时 */\n\tovertime : boolean\n}\n\n/**\n * 路由\n */\nexport type RouteParams = {\n\tpath : string\n\tfullpath : string\n}\n\n/**\n * 页面标题\n */\nexport type TitleConfigParams = {\n\t/** pages.json 中的标题 */\n\tconfig : string\n\t/** setNavigationBarTitle 获取的标题*/\n\tpage : string\n\t/** 自定义上报的标题 */\n\treport : string\n\t/** 统计数据类型 */\n\tlt : string\n\n}\n\n/**\n * 页面参数\n */\nexport type PageParams = {\n\t/** 当前页面的完整 url，包含参数在内。最多255字符 */\n\turl ?: string\n\t/** pages.json 中定义的页面的 title，获取不到时，可以不传 */\n\tttpj ?: string\n\t/** 通过接口 uni.setnavigationbartitle 设置的 title，获取不到时，可以不传 */\n\tttn ?: string\n\t/** 通过 uni.report 上报的页面的 title，获取不到时，可以不传 */\n\tttc ?: string\n\t/** title 组件中设置的 title，获取不到时，可以不传 */\n\tttct ?: string\n\t/** 上个页面的完整 url */\n\turlref : string\n\t/** 上个页面停留时间，单位为秒，不足1秒按1秒计。 url */\n\turlref_ts : number\n\t/** 上个页面的标题 */\n\turlref_tt ?: string\n}\n\n\n/**\n * 上传 unicloud 参数\n */\nexport type RequestData = {\n\t/** 统计 SDK 版本号 */\n\tusv : string\n\t/** 发送请求时的时间戮 */\n\tt : number\n\t/** 组合数据 */\n\trequests : string\n}\n\n/**\n * 用户自定义服务空间配置信息\n */\nexport type CustomUnicloudConfig = {\n\t/** 服务空间id */\n\tspaceId : string,\n\t/** 云厂商 */\n\tprovider : string,\n\t/** clientSecret */\n\tclientSecret ?: string\n\t/** secretKey */\n\tsecretKey ?: string\n\t/** secretId */\n\tsecretId ?: string\n}\n\nexport type EventParams = {\n\t/** 事件名字*/\n\tkey : string\n\t/** 事件内容 */\n\tvalue ?: string\n}\n\n\n/**\n * 统计默认值\n */\nexport type StatDefault = {\n\t/** 设备标识 */\n\tuuid : string\n\t/** uni-app 应用 Appid */\n\tak : string\n\t/** 手机系统 */\n\tp : string\n\t/** 平台类型 */\n\tut : string\n\t/** 原生平台包名、小程序 appid */\n\tmpn ?: string\n\t/** 统计 sdk 版本 */\n\tusv ?: string\n\t/**  应用版本，仅app */\n\tv ?: string\n\t/** 渠道信息 */\n\tch ?: string\n\t/** 国家 */\n\tcn ?: string\n\t/** 省份 */\n\tpn ?: string\n\t/** 城市 */\n\tct ?: string\n\t/** 上报数据时的时间戳 */\n\tt : number\n\t/** 页面标题 */\n\ttt ?: string\n\t/** 手机品牌 */\n\tbrand ?: string\n\t/** 手机型号 */\n\tmd ?: string\n\t/** 手机系统版本 */\n\tsv ?: string\n\t/** x程序 sdk version */\n\tmpsdk ?: string\n\t/** 小程序平台版本 ，如微信、支付宝 */\n\tmpv ?: string\n\t/** 语言 */\n\tlang ?: string\n\t/** pixelRatio 设备像素比 */\n\tpr ?: number\n\t/** windowWidth 可使用窗口宽度 */\n\tww ?: number\n\t/** windowHeight 可使用窗口高度 */\n\twh ?: number\n\t/** screenWidth 屏幕宽度 */\n\tsw ?: number\n\t/** screenHeight 屏幕高度 */\n\tsh ?: number\n\n\t/** 场景值 */\n\tsc ?: number\n\t/** 统计数据类型 */\n\tlt ?: string\n\t/** 老用户错误的的设备id */\n\todid ?: string\n\turl ?: string\n\t/** 首次访问时间戳。需要保存在 storage 中。用户首次访问时，取当前时间。*/\n\tfvts ?: number\n\t/** 上次访问时间戳。需要保存在 storage 中。用户首次访问时，设置为0。*/\n\tlvts ?: number\n\t/** total visit count 用户到本次访问为止总共的访问次数。*/\n\ttvc ?: number\n\t/** 上报时机，参看 ReprotCstType */\n\tcst ?: number\n\turlref_ts ?: number\n\turlref ?: string\n\n\t// 标题相关\n\t/** pages.json 中定义的页面的 title，获取不到时，可以不传 */\n\tttpj ?: string\n\t/** 通过接口 uni.setnavigationbartitle 设置的 title，获取不到时，可以不传 */\n\tttn ?: string\n\t/** 通过 uni.report 上报的页面的 title，获取不到时，可以不传 */\n\tttc ?: string\n\t/** title 组件中设置的 title，获取不到时，可以不传 */\n\tttct ?: string\n\n\t/** push id */\n\tcid ?: string\n\n\t/** 自定义事件key  */\n\te_n ?: string\n\t/** 自定义事件value  */\n\te_v ?: string\n\n\t/** 纬度 */\n\tlat ?: string\n\t/** 经度 */\n\tlng ?: string\n\t/** 网络 */\n\tnet ?: string\n\t/** 错误信息 */\n\tem ?:string\n}\n\n\n/**\n * 应用首次启动上报参数\n */\nexport type AppShowReportParams = {\n\t/** uni-app 应用 Appid */\n\tuuid : string\n\t/** 设备标识 */\n\tak : string\n\t/** 统计数据类型 */\n\tlt : string\n\t/** 平台类型 */\n\tut : string\n\t/** x程序 sdk version */\n\tmpsdk : string\n\t/** 小程序平台版本 ，如微信、支付宝 */\n\tmpv : string\n\t/** 原生平台包名、小程序 appid */\n\tmpn : string\n\t/**  应用版本，仅app */\n\tv : string\n\t/** 手机系统 */\n\tp : string\n\t/** 手机系统版本 */\n\tsv : string\n\t/** 设备网络 */\n\tnet : string\n\t/** 手机品牌 */\n\tbrand : string\n\t/** 手机型号 */\n\tmd : string\n\t/** 语言 */\n\tlang : string\n\t/** 纬度 */\n\tlat : string\n\t/** 经度 */\n\tlng : string\n\t/** pixelRatio 设备像素比 */\n\tpr : number\n\t/** windowWidth 可使用窗口宽度 */\n\tww : number\n\t/** windowHeight 可使用窗口高度 */\n\twh : number\n\t/** screenWidth 屏幕宽度 */\n\tsw : number\n\t/** screenHeight 屏幕高度 */\n\tsh : number\n\t/** 页面启动的url */\n\turl : string\n\t/** 页面标题 */\n\ttt : string\n\t/** 渠道信息 */\n\tch : string\n\t/** 首次访问时间戳。需要保存在 storage 中。用户首次访问时，取当前时间。*/\n\tfvts : number\n\t/** 上次访问时间戳。需要保存在 storage 中。用户首次访问时，设置为0。*/\n\tlvts : number\n\t/** 国家 */\n\tcn : string\n\t/** 省份 */\n\tpn : string\n\t/** 城市 */\n\tct : string\n\t/** 场景值 */\n\tsc : number\n\t/** total visit count 用户到本次访问为止总共的访问次数。*/\n\ttvc : number\n\t/** 统计 sdk 版本 */\n\tusv : string\n\t/** 上报数据时的时间戳 */\n\tt : number\n\t/** 老用户错误的的设备id */\n\todid : string\n\t/** 上报时机，参看 ReprotCstType */\n\tcst : number\n}\n\n/**\n * 应用进入后台上报参数\n */\nexport type AppHideReportParams = {\n\t/** uni-app 应用 Appid */\n\tak : string\n\t/** 设备标识 */\n\tuuid : string\n\t/** 统计数据类型 */\n\tlt : string\n\t/** 平台类型 */\n\tut : string\n\t/** 手机系统 */\n\tp : string\n\t/** 上个页面的完整 url */\n\turlref : string\n\t/** 上个页面停留时间，单位为秒，不足1秒按1秒计。 */\n\turlref_ts : number\n\t/** 渠道信息 */\n\tch : string\n\t/** 统计 sdk 版本 */\n\tusv : string\n\t/** 上报数据时的时间戳。 */\n\tt : number\n}\n\n/**\n * 页面切换上报参数\n */\nexport type PageReportParams = {\n\t/** uni-app 应用 Appid */\n\tak : string\n\t/** 设备标识 */\n\tuuid : string\n\t/** 统计数据类型 */\n\tlt : string\n\t/** 平台类型 */\n\tut : string\n\t/** 手机系统 */\n\tp : string\n\t/** 当前页面 url */\n\turl : string\n\t// 标题相关\n\t/** pages.json 中定义的页面的 title，获取不到时，可以不传 */\n\tttpj : string\n\t/** 通过接口 uni.setnavigationbartitle 设置的 title，获取不到时，可以不传 */\n\tttn : string\n\t/** 通过 uni.report 上报的页面的 title，获取不到时，可以不传 */\n\tttc : string\n\t/** title 组件中设置的 title，获取不到时，可以不传 */\n\tttct : string\n\t/** 上个页面的完整 url */\n\turlref : string\n\t/** 上个页面停留时间，单位为秒，不足1秒按1秒计。 */\n\turlref_ts : number\n\t/** 渠道信息 */\n\tch : string\n\t/** 统计 sdk 版本 */\n\tusv : string\n\t/** 上报数据时的时间戳。 */\n\tt : number\n\t/** 上报时机，参看 ReprotCstType */\n\tcst ?: number\n\n}\n\nexport type ErrorCallback = (is_err : boolean, errMsg : string) => void\n","import { dbGet } from \"./db\"\nimport { PAGE_PVER_TIME, APP_PVER_TIME } from '../config.uts';\nimport { ResidenceTimeReturn } from '../../interface.uts'\nimport { dbSet, dbRemove } from \"./db\";\n\n// 首次访问时间\nconst FIRST_VISIT_TIME_KEY = '__first__visit__time'\n// 最后访问时间\nconst LAST_VISIT_TIME_KEY = '__last__visit__time'\n// 访问总数\nconst TOTAL_VISIT_COUNT = '__total__visit__count'\nconst FIRST_TIME = '__first_time'\n\n// 页面停留时间记录key\nconst PAGE_RESIDENCE_TIME = '__page__residence__time'\nlet First_Page_Residence_Time = 0\nlet Last_Page_Residence_Time = 0\n\n/**\n * 获取当前时间\n */\nexport const get_time = () : number => {\n  return Math.floor(new Date().getTime() / 1000)\n}\n\n\n/**\n * 设置页面首次访问时间，用户获取页面/应用停留时常\n */\nexport const set_first_time = () : number => {\n\t// 获取当前时间 ，以下代码获取到是毫秒级时间戳 ，实际上用到是秒级时间戳，所以需要除以1000\n\t// const time = new Date().getTime()\n\tlet time = get_time()\n\tdbSet(FIRST_TIME, time)\n\treturn time\n}\n\n\n\n/**\n * 获取首次访问时间\n */\nexport const get_first_visit_time = () : number => {\n\tconst timeStorge = dbGet<number>(FIRST_VISIT_TIME_KEY)\n\tlet time : number\n\tif (timeStorge != null && timeStorge != 0) {\n\t\ttime = timeStorge as number\n\t} else {\n\t\ttime = get_time()\n\t\tdbSet(FIRST_VISIT_TIME_KEY, time)\n\t\t// 首次访问需要 将最后访问时间置 0\n\t\tdbRemove(LAST_VISIT_TIME_KEY)\n\t}\n\treturn time\n}\n\n/**\n * 最后访问时间\n */\nexport const get_last_visit_time = () : number => {\n\tconst timeStorge = dbGet<number>(LAST_VISIT_TIME_KEY)\n\tlet time = 0\n\tif (timeStorge != null && timeStorge != 0) {\n\t\ttime = timeStorge as number\n\t}\n\tdbSet(LAST_VISIT_TIME_KEY, get_time())\n\treturn time\n}\n\n\n/**\n * 获取总访问次数\n */\nexport const get_total_visit_count = () : number => {\n\tconst timeStorge = dbGet<number>(TOTAL_VISIT_COUNT)\n\tlet count = 1\n\tif (timeStorge != null) {\n\t\tcount = timeStorge as number\n\t\tcount++\n\t}\n\tdbSet(TOTAL_VISIT_COUNT, count)\n\treturn count\n}\n\n/**\n * 获取页面 \\ 应用停留时间\n */\nexport const get_residence_time = (type : string) : ResidenceTimeReturn => {\n\tlet residenceTime = 0\n\tconst last_time = get_time()\n\tconst first_time = (dbGet(FIRST_TIME) ?? last_time) as number\n\tif (first_time != 0) {\n\t\tresidenceTime = last_time - first_time\n\t}\n\t// 将毫秒级时间戳转换为秒级时间戳，因为直接获取的是秒级时间戳，所以不需要转换\n\t// residenceTime = parseInt(residenceTime / 1000)\n\tresidenceTime = residenceTime < 1 ? 1 : residenceTime\n\tlet timeData : ResidenceTimeReturn = {\n\t\tresidenceTime: residenceTime,\n\t\tovertime: false,\n\t}\n\tif (type === 'app') {\n\t\tlet overtime = residenceTime > APP_PVER_TIME ? true : false\n\t\ttimeData.overtime = overtime\n\t\treturn timeData\n\t}\n\tif (type === 'page') {\n\t\tlet overtime = residenceTime > PAGE_PVER_TIME ? true : false\n\t\ttimeData.overtime = overtime\n\t\treturn timeData\n\t}\n\treturn timeData\n}\n\n/**\n * 设置页面停留时间\n */\nexport const set_page_residence_time = () : number => {\n\tFirst_Page_Residence_Time = get_time()\n\tdbSet(PAGE_RESIDENCE_TIME, First_Page_Residence_Time)\n\treturn First_Page_Residence_Time\n}\n\n/**\n * 获取页面停留时间\n */\nexport const get_page_residence_time = () : number => {\n\tLast_Page_Residence_Time = get_time()\n\tFirst_Page_Residence_Time = dbGet<number>(PAGE_RESIDENCE_TIME) ?? 0\n\tconst diff : number = Last_Page_Residence_Time - First_Page_Residence_Time\n\treturn diff\n}\n","\n/**\n * lifecycle 生命周期类型\n */\nexport class StatType {\n\t/**应用onLauch*/\n\tstatic LifeCycleLaunch : number = 1\n\t/**页面onLoad*/\n\tstatic LifeCycleLoad : number = 2\n\t/**应用 onShow */\n\tstatic LifeCycleAppShow : number = 3\n\t/**应用 onHide */\n\tstatic LifeCycleAppHide : number = 4\n\t/**页面 onShow*/\n\tstatic LifeCyclePageShow : number = 5\n\t/**页面 onHide */\n\tstatic LifeCyclePageHide : number = 6\n\t/**页面卸载*/\n\tstatic LifeCyclePageUnLoad : number = 7\n\t/**错误*/\n\tstatic LifeCycleError : number = 8\n}\n\n/**\n * lt 统计数据类型\n */\nexport class ReportType {\n\t/** 1: 应用启动，对应 `onLaunch` 事件 */\n\tstatic AppStart : string = \"1\"\n\t/** 2: 应用显示，对应 `onShow` 事件 */\n\tstatic AppShow : string = \"2\"\n\t/** 3: 应用进入后台，对应 `onHide` 事件 */\n\tstatic AppHide : string = \"3\"\n\t/** 4: 应用退出 */\n\tstatic AppExit : string = \"4\"\n\n\t/** 11: 页面跳转，对应 `onShow` 事件 */\n\tstatic PageShow : string = \"11\"\n\t/** 12: 页面关闭，对应 `onHide` 事件 */\n\tstatic PageHide : string = \"12\"\n\n\t/** 21: 事件 */\n\tstatic Event : string = \"21\"\n\t/** 31: 错误信息 */\n\tstatic Error : string = \"31\"\n\t/** 101: 推送 */\n\tstatic Push : string = \"101\"\n}\n\n\n/**\n * 平台类型\n */\nexport class PlatformType {\n\t// TODO 平台需要整理在这里\n}\n\n/**\n * cst 上报时机类型 \n */\n\nexport class ReprotCstType {\n\t/** 1: 正常进入上报 */\n\tstatic AppNormal : number = 1\n\t/** 2: 后台进前台超时上报 */\n\tstatic AppAwakenTimeout : number = 2\n\t/** 3: 页面停留超时上报 */\n\tstatic PageStayTimeout : number = 3\n}\n\n// 应用首次启动需要保留的keys \nexport const AppShowParamsKeys = [\"uuid\", \"ak\", \"lt\", \"ut\", \"mpsdk\", \"mpv\", \"mpn\", \"v\", \"p\", \"sv\", \"net\", \"brand\", \"md\", \"lang\", \"lat\", \"lng\", \"pr\", \"ww\", \"wh\", \"sw\", \"sh\", \"url\", \"tt\", \"ch\", \"fvts\", \"lvts\", \"cn\", \"pn\", \"ct\", \"sc\", \"tvc\", \"usv\", \"t\", \"odid\", \"cst\"]\n// 应用进入后台需要保留的keys\nexport const AppHideParamsKeys = ['ak', 'uuid','ttn','ttpj','ttc', 'lt', 'ut', 'p', 'urlref', 'urlref_ts', 'ch', 'usv', 't']\n// 页面切换需要保留的keyss\nexport const PageShowParamsKeys = ['ak', 'uuid', 'lt', 'ut', 'p', 'url', 'ttpj', 'ttn', 'ttc', 'ttct', 'urlref', 'urlref_ts', 'ch', 'usv', 't']\n// push 需要保留的keys\nexport const PushParamsKeys = ['lt', 'cid', 't', 'ut']\n// 事件需要保留的keys\nexport const EventParamsKeys = ['ak', 'uuid', 'p', 'lt', 'ut', 'url', 'ch', 'e_n', 'e_v', 'usv', 't']\n// 错误事件需要保留的keys\nexport const ErrorParamsKeys = [\"ak\", \"uuid\", \"p\", \"lt\", \"url\", \"ut\", \"ch\", \"mpsdk\", \"mpv\", \"v\", \"em\", \"usv\", \"t\"]\n","// AppShowReportParams, AppHideReportParams, PageReportParams,\nimport { StatDefault } from '../../interface.uts'\n\nimport { AppShowParamsKeys, AppHideParamsKeys, PageShowParamsKeys, PushParamsKeys, EventParamsKeys,ErrorParamsKeys } from '../core/stat-type.uts'\n\n/**\n * 序列化url参数\n * @param {Object} obj\n * @example  \n */\nexport function Serialize(obj : UTSJSONObject) : string {\n\tlet str : string[] = [];\n\tfor (let p in obj) {\n\t\tif (obj.hasOwnProperty(p)) {\n\t\t\tlet key = obj[p]\n\t\t\tif (obj[p] == null) {\n\t\t\t\tkey = ''\n\t\t\t}\n\t\t\tconst text = p + \"=\" + key\n\t\t\tstr.push(text);\n\t\t}\n\t}\n\treturn \"?\" + str.join(\"&\");\n}\n\nexport function IsNumber(value : any | null) : boolean {\n\treturn typeof value === 'number';\n\t// if (value.trim() === \"\") {\n\t// \treturn false;\n\t// }\n\t// const num = parseInt(value);\n\t// if (isNaN(num)) {\n\t// \treturn false;\n\t// }\n\t// return true;\n}\n\n/**\n * 上报参数过滤\n */\nexport function FilterParam<T>(keys : string[] = [], data : StatDefault) : T {\n\tlet result = {};\n\tkeys.forEach(key => {\n\t\tresult[key] = data[key];\n\t});\n\tlet formdata : T = result as T\n\treturn formdata;\n}\n\n\n/**\n * 日志输出\n * @param {StatDefault} data 统计数据\n * @param {Boolean} type 打印类型，如果是type=true ，则是最终上报数据\n */\nexport function Log(data : StatDefault, type : Boolean = false) {\n\n\tlet logData = getEventData(data.lt!, data)\n\tlet msg_type : string = ''\n\n\tswitch (data.lt) {\n\t\tcase '1':\n\t\t\tmsg_type = '应用启动'\n\t\t\tbreak\n\t\tcase '3':\n\t\t\tmsg_type = '应用进入后台'\n\t\t\tbreak\n\n\t\tcase '11':\n\t\t\tmsg_type = '页面切换'\n\t\t\tbreak\n\t\tcase '21':\n\t\t\tmsg_type = '事件触发'\n\t\t\tbreak\n\t\tcase '31':\n\t\t\tmsg_type = '应用错误'\n\t\t\tbreak\n\t\tcase '101':\n\t\t\tmsg_type = 'PUSH'\n\t\t\tbreak\n\t}\n\n\tif (type) {\n\t\tconsole.log(`=== 统计队列数据上报 ===`)\n\t\tconsole.log(logData)\n\t\tconsole.log(`=== 上报结束 ===`)\n\t\treturn\n\t}\n\n\tif (msg_type != '') {\n\t\tconsole.log(`=== 统计数据采集：${msg_type} ===`)\n\t\tconsole.log(logData)\n\t\tconsole.log(`=== 采集结束 ===`)\n\t}\n}\n\n/**\n * map 转 string\n */\nexport function Map2String(statData : Map<string, StatDefault[]>) : string {\n\tlet statDataJson = {}\n\tstatData.forEach((rd : StatDefault[], key : string) => {\n\t\tstatDataJson[key] = rd\n\t});\n\treturn JSON.stringify(statDataJson)\n}\n\nexport function Map2Json(statData : Map<string, StatDefault[]>) : UTSJSONObject {\n\tlet statDataJson = {}\n\tstatData.forEach((rd : StatDefault[], key : string) => {\n\t\tlet arr : object[] = [];\n\t\trd.forEach((elm : StatDefault) => {\n\t\t\tlet data = getEventData(key, elm)\n\n\t\t\tarr.push(data)\n\t\t})\n\n\t\tstatDataJson[key] = arr\n\n\t});\n\n\treturn statDataJson\n}\n\n\n\n/**\n * 处理上报参数\n * @param {Object}  statData 需要处理的数据\n */\nexport const handle_data = (statData : Map<string, StatDefault[]>) : string => {\n\tlet firstArr : any[] = []\n\tlet contentArr : any[] = []\n\tlet lastArr : any[] = []\n\tstatData.forEach((rd : StatDefault[], key : string) => {\n\t\trd.forEach((elm : StatDefault) => {\n\t\t\tlet data = getEventData(key, elm)\n\t\t\tif (key == '1') {\n\t\t\t\tfirstArr.push(data)\n\t\t\t} else if (key == '4') {\n\t\t\t\tlastArr.push(data)\n\t\t\t} else {\n\t\t\t\tcontentArr.push(data)\n\t\t\t}\n\t\t})\n\t});\n\tfirstArr.push(...contentArr, ...lastArr)\n\treturn JSON.stringify(firstArr)\n}\n\n/**\n * 获取具体的上报参数对象\n */\nfunction getEventData(lt : string, elm : StatDefault) : any {\n\tlet data : any = {}\n\tswitch (lt) {\n\t\tcase '1'://应用启动\n\t\t\tdata = FilterParam(AppShowParamsKeys, elm) \n\t\t\tbreak\n\t\tcase '3': // 应用进入后台\n\t\t\tdata = FilterParam(AppHideParamsKeys, elm)\n\t\t\tbreak\n\t\tcase '11': //页面切换\n\t\t\tdata = FilterParam(PageShowParamsKeys, elm)\n\t\t\tbreak\n\t\tcase '21': // 事件触发\n\t\t\tdata = FilterParam(EventParamsKeys, elm)\n\t\t\tbreak\n\t\tcase '31': // 应用错误\n\t\t\tdata = FilterParam(ErrorParamsKeys, elm)\n\t\t\tbreak\n\t\tcase '101': // PUSH\n\t\t\tdata = FilterParam(PushParamsKeys, elm)\n\t\t\tbreak\n\t}\n\t\n\treturn data\n}\n","import { OnLaunchOptionsWithCst, RouteParams, StatDefault } from '../../interface.uts'\nimport { STAT_VERSION, sys, sysAppBase, Config } from '../config.uts'\n// import Config from '../config.uts'\nimport { get_time } from './pageTime.uts'\nimport { dbGet, dbSet } from './db.uts'\nimport { Serialize, IsNumber } from './index.uts'\n\nconst APPID = sys.appId\nconst RUNTIME_VERSION = sys.appVersion\n// const UUID_KEY = '__DC_STAT_UUID'\n// const UUID_VALUE = '__DC_UUID_VALUE'\n\n/**\n * 生成uuid，一般用不到\n */\n// function getUuid() : string {\n// \tlet uuid : string\n// \tif (get_platform_name() === 'n') {\n// \t\ttry {\n// \t\t\tuuid = sys.deviceId\n// \t\t} catch (e) {\n// \t\t\tuuid = ''\n// \t\t}\n// \t\treturn uuid\n// \t}\n\n// \ttry {\n// \t\tuuid = uni.getStorageSync(UUID_KEY) as string\n// \t} catch (e) {\n// \t\tuuid = UUID_VALUE\n// \t}\n\n// \tif (uuid != '') {\n// \t\tuuid = Date.now() + '' + Math.floor(Math.random() * 1e7)\n// \t\ttry {\n// \t\t\tuni.setStorageSync(UUID_KEY, uuid)\n// \t\t} catch (e) {\n// \t\t\tuni.setStorageSync(UUID_KEY, UUID_VALUE)\n// \t\t}\n// \t}\n// \treturn uuid\n// }\n\n\n/**\n * 获取uuid\n */\nexport const get_uuid = () : string => {\n  // 有可能不存在 deviceId（一般不存在就是出bug了），就自己生成一个\n  // 目前 deviceId 肯定存在所以不用生成\n  // const uuid : string = sys.deviceId ?? getUuid()\n  return sys.deviceId\n}\n\n/**\n * 获取老版的 deviceid ,兼容以前的错误 deviceid\n */\nexport const get_odid = () : string => {\n  // let odid : string\n  // if (get_platform_name() === 'n') {\n  // \ttry {\n  // \t\todid = plus.device.uuid\n  // \t} catch (e) {\n  // \t\todid = ''\n  // \t}\n  // \treturn odid\n  // }\n  // odid = sys.deviceId ?? getUuid()\n  // TODO 需要获取老版本的uuid ，目前无法获取，只返回 deviceId\n  return sys.deviceId\n}\n\n\n\n/**\n * 获取当前平台\n * 移动端  : 'n',\n * h5\t  : 'h5',\n * 微信\t  : 'wx',\n * 阿里\t  : 'ali',\n * 百度\t  : 'bd',\n * 头条\t  : 'tt',\n * qq\t  : 'qq',\n * 快应用  : 'qn',\n * 快手\t  : 'ks',\n * 飞书\t  : 'lark',\n * 快应用  : 'qw',\n * 钉钉\t  : 'dt'\n */\nexport const get_platform_name = () : string => {\n\n  let platformList = {\n    'app': 'n',\n    'app-plus': 'n',\n    'h5': 'h5',\n    'web': 'web',\n    'mp-weixin': 'wx',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq',\n    'quickapp-native': 'qn',\n    'mp-kuaishou': 'ks',\n    'mp-lark': 'lark',\n    'quickapp-webview': 'qw',\n  }\n\n  // 苹果审核代码中禁止出现 alipay 字样 ，需要特殊处理一下\n  const aliArr = ['y', 'a', 'p', 'mp-ali']\n  const aliKey = aliArr.reverse().join('')\n  platformList[aliKey] = 'ali'\n\n  const platform = sys.uniPlatform\n  // TODO 兼容子平台\n  // if (platformList[process.env.VUE_APP_PLATFORM] === 'ali') {\n  // \tif (my && my.env) {\n  // \t\tconst clientName = my.env.clientName\n  // \t\tif (clientName === 'ap') return 'ali'\n  // \t\tif (clientName === 'dingtalk') return 'dt'\n  // \t\t// TODO 缺少 ali 下的其他平台\n  // \t}\n  // }\n  return platformList[platform] as string\n}\n\n/**\n * 获取原生包名，或小程序 appid\n */\nexport const get_pack_name = () : string => {\n  let packName = ''\n  if (get_platform_name() === 'n') {\n    if (sys.osName == 'android') {\n      packName = sysAppBase.packageName ?? ''\n    }\n    if (sys.osName == 'ios') {\n      packName = sysAppBase.bundleId ?? ''\n    }\n  }\n  return packName\n}\n\n/**\n * 应用版本\n */\nexport const get_version = () : string => {\n  return RUNTIME_VERSION\n}\n\n/**\n * 获取渠道\n */\nexport const get_channel = () : string => {\n  // const platformName = get_platform_name()\n  let channel = ''\n  // if (platformName === 'n') {\n  //   channel = plus.runtime.channel\n  // }\n  // if (platformName === 'wx') {\n  //   // TODO 需要调研小程序二维码渠道如何获取;\n  // }\n  return channel\n}\n\n/**\n * 获取小程序场景值\n */\nexport const get_scene = (_ : OnLaunchOptionsWithCst) : number => {\n  // TODO 场景值获取有问题 ，暂时硬编码，需要修改\n  // options : OnLaunchOptionsWithCst\n  // const platformName = get_platform_name()\n  // let scene = ''\n  // if (options) {\n  // \treturn options\n  // }\n  // if (platformName === 'wx') {\n  // \tscene = uni.getLaunchOptionsSync().scene\n  // }\n  // return scene\n  // return options.scene as number\n  return 1001\n}\n\n/**\n * 获取页面类型\n * @param {VueComponent} appInstance 页面实例\n */\n// @ts-ignore\nexport const get_page_types = (appInstance : ComponentPublicInstance) : string => {\n  // TODO 暂时无法获取是否应用还是页面，写的硬编码，只支持页面调用\n\n\n\n\n  return 'page'\n\n}\n\n/**\n * 是否获取 page 页面\n * @param {VueComponent} appInstance 页面实例\n */\n// @ts-ignore\nexport const is_page = (appInstance : ComponentPublicInstance) : Boolean => {\n\n\n\n\n\n  // 其他平台没有 $mpType ，只有页面触发\n  return true\n\n\n}\n\n\n/**\n * 获取页面标题\n * @param {String} routepath 页面路由\n */\nexport const get_page_name = (routepath : string) : string => {\n  let page = get_page_vm()\n\n  if (page == null) return ''\n\n  if (page.route != routepath) {\n    const pages = getCurrentPages()\n    // 如果传入路由与当前页面不同，则从页面栈找一个，如果找不到返回空\n    let page_now = pages.find((v) : boolean => {\n      if (v.route == routepath) {\n        return true;\n      }\n      return false\n    })\n    if (page_now == null) {\n      return ''\n    }\n    page = page_now\n  }\n\n  const pageStyle = page.$getPageStyle()\n  const titleText = pageStyle['navigationBarTitleText'] ?? ''\n  return titleText as string\n}\n\n/**\n * 获取页面实例\n */\nexport const get_page_vm = () : Page | null => {\n  let pages = getCurrentPages()\n  if (pages.length == 0) {\n    return null\n  }\n  let page = pages[pages.length - 1]\n  // TODO 正常来说，调用当前方法的地方只在 生命周期内，数组内最少会有一个页面，所以理论上是不存在获取不到的情况的\n  return page\n}\n\n\n/**\n * 获取页面url，不包含参数\n * @param {ComponentPublicInstance} page 页面实例\n */\nexport function get_route(page : Page | null = null) : RouteParams {\n  let _self = page ?? get_page_vm()\n\n  if (_self == null) {\n    const data : RouteParams = {\n      path: '',\n      fullpath: ''\n    }\n    return data\n  }\n\n  // TODO 条件编译处理参数问题，安卓上 options返回的是map，需要处理成 utsobject\n\n  const opts = new UTSJSONObject(_self.options)\n  // TODO 上报页面参数需要处理\n  let url_params = Serialize(opts)\n\n\n\n\n\n  let params = ''\n  // 如果参数只有 ？则说明没有参数\n  if (url_params != '?') {\n    params = url_params\n  }\n  let route = _self.route\n\n  const data : RouteParams = {\n    path: route,\n    fullpath: route + params\n  }\n  return data\n}\n\n\n/**\n * 获取页面url, 包含参数 ,暂时不用，合并到 get_route\n * @param {ComponentPublicInstance} page 页面实例\n */\nexport function get_page_route(page : Page | null = null) : string {\n  let _self = page ?? get_page_vm()\n  let lastPageRoute = uni.getStorageSync('_STAT_LAST_PAGE_ROUTE')\n  if (_self == null) {\n    return lastPageRoute ?? ''\n  }\n  // 如果找不到 fullPath 就取 route 的值\n  // TODO 取完整路径，目前最新为 optiosn 为携带参数，需要手动序列化\n  // return page.fullPath === '/' ? page.route : page.fullPath || page.route\n  return _self.route\n}\n\n/**\n * 是否上报页面数据\n * @returns\n */\nexport const is_page_report = () : boolean => {\n  const uniStatConfig = Config.getOptions();\n  const collectItems = uniStatConfig.collectItems;\n  if (collectItems != null) {\n    const statPageLog = collectItems.uniStatPageLog\n    if (statPageLog == null) return true\n    return typeof statPageLog == 'boolean' ? statPageLog : true\n  }\n  return true\n}\n\n\n/**\n * 是否已处理设备 DeviceId\n * 如果值为 1 则表示已处理\n */\nconst IS_HANDLE_DEVECE_ID = 'is_handle_device_id'\nexport const is_handle_device = () : boolean => {\n  let isHandleDevice = dbGet(IS_HANDLE_DEVECE_ID) ?? ''\n  dbSet(IS_HANDLE_DEVECE_ID, '1')\n  return isHandleDevice === '1'\n}\n\n\n/**\n * 获取上报数据默认值\n */\nexport const get_default_data = () : StatDefault => {\n\n  let statData : StatDefault = {\n    uuid: get_uuid(),\n    ak: APPID,\n    p: sys.osName == 'android' ? 'a' : 'i',\n    ut: get_platform_name(),\n    mpn: get_pack_name(),\n    usv: STAT_VERSION,\n    v: RUNTIME_VERSION,\n    ch: get_channel(),\n    cn: '',\n    pn: '',\n    ct: '',\n    t: get_time(),\n    tt: '',\n    brand: sys.deviceBrand,\n    md: sys.deviceModel,\n    sv: sys.osVersion.replace(/(Android|iOS)\\s/, ''),\n    mpsdk: sys.SDKVersion,\n    mpv: sys.uniCompilerVersionCode.toString(),\n    // mpv: '',\n    lang: sys.osLanguage,\n    pr: sys.devicePixelRatio,\n    ww: sys.windowWidth,\n    wh: sys.windowHeight,\n    sw: sys.screenWidth,\n    sh: sys.screenHeight,\n    lat: '',\n    lng: '',\n    net: '',\n    odid: ''\n  }\n  return statData\n}\n\n/**\n * 获取上报时间间隔\n * @param {*} defaultTime 默认上报间隔时间 单位s\n */\nexport const get_report_Interval = (defaultTime : number) : number => {\n  const uniStatConfig = Config.getOptions()\n  let time = uniStatConfig.reportInterval\n  // let reg = /(^[1-9]\\d*$)/\n  // 如果不是整数，则默认为上报间隔时间\n  // if (!reg.test(time)) return defaultTime\n  if (!IsNumber(time)) return defaultTime\n\n  // 如果上报时间配置为0 相当于立即上报\n  if (time == 0) return 0\n  // time = time ?? defaultTime\n  return time as number\n}\n\n\n\n/**\n * 获取uniCloud服务空间配置\n * @returns {Object}\n */\nexport const uni_cloud_config = () : UniCloudInitOptions | null => {\n  // return process.env.UNI_STAT_UNI_CLOUD || {}\n  // const custemUnicloudConfig: = {}\n  return null\n}\n\n/**\n * 获取服务空间\n * @param {*} config\n * @returns\n */\nexport const get_space = (config : UniCloudInitOptions) : UniCloudInitOptions | null => {\n  const uniCloudConfig = uni_cloud_config()\n  if (uniCloudConfig == null) {\n    console.log(config);\n\n    if (config.spaceId != '') {\n      return config\n    }\n\n\n\n\n\n\n\n    return null\n  }\n\n  let spaceId = uniCloudConfig.spaceId\n  let provider = uniCloudConfig.provider\n  let clientSecret = uniCloudConfig.clientSecret\n  let secretKey = uniCloudConfig.secretKey\n  let accessKey = uniCloudConfig.accessKey\n\n  const space_type = ['tcb', 'tencent', 'aliyun', 'alipay']\n  // @ts-ignore\n  const is_space_id = spaceId != ''\n  const is_provider = space_type.indexOf(provider) != -1\n  const is_aliyun = provider == 'aliyun' && is_space_id && clientSecret != null\n  const is_tcb = (provider == 'tcb' || provider === 'tencent') && is_space_id\n  const is_alipay = provider == 'alipay' && is_space_id && secretKey != null && accessKey != null\n\n  if (is_provider && (is_aliyun || is_tcb || is_alipay)) {\n    return uniCloudConfig\n  }\n\n  return null\n}\n\n/**\n * 获取隐私协议配置\n */\nexport const is_push_clientid = () : boolean => {\n  const uniStatConfig = Config.getOptions()\n  const collectItems = uniStatConfig.collectItems\n  if (collectItems != null) {\n    const ClientID = collectItems.uniPushClientID ?? false\n    return typeof ClientID == 'boolean' ? ClientID : false\n  }\n  return false\n}\n\n\n\n/**\n * 自定义事件参数校验\n */\nexport const calibration = (eventName : string, options : any | null) : boolean => {\n  // login 、 share 、pay_success 、pay_fail 、register 、title\n  if (eventName == '') {\n    console.error(`uni.report Missing [eventName] parameter`)\n    return true\n  }\n  if (typeof eventName != 'string') {\n    console.error(\n      `uni.report [eventName] Parameter type error, it can only be of type String`\n    )\n    return true\n  }\n  if (eventName.length > 255) {\n    console.error(\n      `uni.report [eventName] Parameter length cannot be greater than 255`\n    )\n    return true\n  }\n\n  if (typeof options != 'string' && typeof options != 'object') {\n    console.error(\n      'uni.report [options] Parameter type error, Only supports String or Object type'\n    )\n    return true\n  }\n\n  if (typeof options == 'string' && (options as string).length > 255) {\n    console.error(\n      `uni.report [options] Parameter length cannot be greater than 255`\n    )\n    return true\n  }\n\n  if (eventName == 'title' && typeof options != 'string') {\n    console.error(\n      `uni.report [eventName] When the parameter is title, the [options] parameter can only be of type String`\n    )\n    return true\n  }\n  return false\n}\n","import { Report, ReportOptions, ReportSuccess, ReportFail } from './interface.uts'\nimport { Stat } from './common/core/stat.uts'\nconst stat = Stat.getInstance()\n\n\nexport const report : Report = function (options : ReportOptions) {\n\tconst name = options.name\n\tconst option = options.options\n\n\tstat.appEvent(name, option, (type : boolean, msg : string) => {\n\t\tif (type) {\n\t\t\tconst res : ReportSuccess = {\n\t\t\t\terrMsg: 'report:ok',\n\t\t\t}\n\t\t\toptions.success?.(res)\n\t\t\toptions.complete?.(res)\n\t\t} else {\n\t\t\tconst err : ReportFail = {\n\t\t\t\terrMsg: 'report fail:' + msg,\n\t\t\t}\n\t\t\toptions.fail?.(err)\n\t\t\toptions.complete?.(err)\n\t\t}\n\t})\n}\n\nexport { Stat } from './common/core/stat.uts'\n// // --- 导出统计类型 ---\nexport { UniStatOptions, UniStatCollectItemsOptions } from './interface.uts'\n"],"names":[],"mappings":"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"}